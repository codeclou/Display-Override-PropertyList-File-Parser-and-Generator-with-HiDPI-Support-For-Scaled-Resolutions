{"version":3,"sources":["common/components/CharsetAndEncodingHelper.js","common/components/AspectRatioCalculator.module.css","common/components/App.module.css","common/components/img/logo-scaled-resolutions.svg","common/components/PlistForm.module.css","common/components/PlistParser.jsx","common/components/PlistConstants.js","common/components/XmlParserError.js","common/components/XmlParser.js","common/components/PlistForm.jsx","common/components/PlistContainer.jsx","common/components/AspectRatioCalculator.jsx","common/components/App.jsx","serviceWorker.js","index.js","common/components/PlistContainer.module.css"],"names":["CharsetAndEncodingHelper","object","undefined","JSON","parse","stringify","err","intNumber","Number","toString","hexString","this","intToHex","len","length","hexWithZeroPrefixed","i","parseInt","base64String","Buffer","replace","trim","splitted","split","ret","hexToInt","hexStringToEncode","module","exports","alertify","logPosition","PlistParser","plistXmlString","updatePlistXmlString","value","options","mode","theme","lineNumbers","onBeforeChange","editor","data","onChange","plistConstants","plistXmlHeader","plistXmlFooter","defaultResolutionForAddNew","decoded","decimalStringSpaced","hexStringSpaced","decimal","width","height","hidpi","XmlParserError","message","stack","Error","name","constructor","XmlParser","encHelp","window","DOMParser","parseXmlIntern","xmlStr","parseFromString","ActiveXObject","xmlDoc","async","loadXML","xmlString","decimalScaleResolutionObject","push","intToHexPrefixedWithZerosTo8Bit","joinedHexString","join","hexToBase64","decodedObject","base64ToHexStringSpaced","decimalItems","base64ToDecimalStringSpaced","resolution","plistObject","xml","displayProductName","displayProductId","displayVendorId","scaleResolutions","forEach","scaleResolution","parseXml","getElementsByTagName","plistJson","children","documentElement","childNodes","nodeName","dictChildren","j","dictChildNodeName","dictChildNodeValue","nodeValue","scaleResolutionsChildren","l","generateDecimalScaleResolutionObject","generateDecodedScaleResolutionObject","xmlParser","PlistForm","props","isValidHexString","hexStringToCheck","match","error","isValidDecimalString","decimalStringToCheck","handleResolutionInputChange","event","index","target","getAttribute","newState","Array","from","plist","deepCopyOrReturnEmptyObject","checked","generateBase64String","handleChange","handleInputChange","className","classNames","plistStyles","resolutionBox","resolutionSettingsHeading","field","type","hexColumn","hexField","style","resolutionListTd","resolutionList","resolutionListHeading","map","scaleResolutionIndex","key","resolutionListItem","data-index","resolutionField","href","resolutionButton","resolutionButtonRemove","onClick","e","preventDefault","filter","_","hexCode","addResolution","resolutionButtonAdd","PlistContainer","handlePlistParserChange","bind","handlePlistFormChange","downloadPlistAsFile","parser","state","parsePlistXml","xmlParseError","newPlistXmlString","setState","newPlistJsonObject","generatePlistXml","textFileAsBlob","Blob","fileNameToSaveAs","getPlistFilename","downloadLink","document","createElement","download","innerHTML","webkitURL","createObjectURL","URL","onclick","body","removeChild","display","appendChild","click","xmlNoticeMessage","xmlNoticeClassNames","plistContainerStyles","xmlValid","xmlInvalid","filename","getFullPlistFilename","buttonBarFooter","resetButton","downloadButton","downloadNote","appStyles","howTo","warning","warningIcon","marginRight","size","numberedList","numberedListFirst","howtoHeaderH5","codeBox","numberedListSecond","numberedListThird","numberedListFourth","numberedListFifth","Component","AspectRatioCalculator","recalculate","ratioWidth","ratioHeight","ratio","ratioStyles","React","App","foo","src","logo","maxWidth","alt","rel","bigSurMessage","app","backgroundColor","csBox","fontSsize","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ece711ef.chunk.js","sourcesContent":["export default class CharsetAndEncodingHelper {\n\n  deepCopyOrReturnEmptyObject(object) {\n    if (object === undefined || object === null) {\n      return {};\n    }\n    try {\n      return JSON.parse(JSON.stringify(object));\n    } catch (err) {\n      return {};\n    }\n  }\n\n  intToHex(intNumber) {\n    if (intNumber !== undefined && intNumber !== null) {\n      return Number(intNumber).toString(16);\n    }\n    return '';\n  }\n\n  intToHexPrefixedWithZerosTo8Bit(intNumber) {\n    const hexString = this.intToHex(intNumber);\n    const len = 8 - hexString.length;\n    let hexWithZeroPrefixed = '';\n    for (let i = 0; i < len; i++) {\n      hexWithZeroPrefixed = `0${hexWithZeroPrefixed}`;\n    }\n    return `${hexWithZeroPrefixed}${hexString}`;\n  }\n\n  hexToInt(hexString) {\n    return parseInt(hexString, 16);\n  }\n\n  base64ToHexStringSpaced(base64String) {\n    if (base64String === undefined || base64String === null || base64String === '') {\n      return '';\n    }\n    return new Buffer(base64String, 'base64').toString('hex').replace(/(.{8})/g, '$1 ')\n      .trim();\n  }\n\n  base64ToDecimalStringSpaced(base64String) {\n    if (base64String === undefined || base64String === null || base64String === '') {\n      return '';\n    }\n    const hexString = new Buffer(base64String, 'base64').toString('hex').replace(/(.{8})/g, '$1 ')\n      .trim();\n    const splitted = hexString.split(' ');\n    let ret = '';\n    for (let i = 0; i < splitted.length; i++) {\n      ret = `${ret}${this.hexToInt(splitted[i])} `;\n    }\n    return ret.trim();\n  }\n\n  hexToBase64(hexStringToEncode) {\n    if (hexStringToEncode === undefined || hexStringToEncode === null || hexStringToEncode === '') {\n      return '';\n    }\n    return new Buffer(hexStringToEncode, 'hex').toString('base64');\n  }\n\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"AspectRatioCalculator_field__3STgK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1Ztm_\",\"warning\":\"App_warning__2tsBH\",\"warningIcon\":\"App_warningIcon__2S3eI\",\"numberedList\":\"App_numberedList__2JumD\",\"howtoHeaderH3\":\"App_howtoHeaderH3__37ExU\",\"howtoHeaderH5\":\"App_howtoHeaderH5__3cU5C\",\"numberedListFirst\":\"App_numberedListFirst__1jgkW\",\"numberedListSecond\":\"App_numberedListSecond__2KLoh\",\"numberedListThird\":\"App_numberedListThird__21CjC\",\"numberedListFourth\":\"App_numberedListFourth__V2u0d\",\"numberedListFifth\":\"App_numberedListFifth__WUzZu\",\"csBox\":\"App_csBox__1JAKt\",\"howTo\":\"App_howTo__121JB\",\"codeBox\":\"App_codeBox__2XKjG\",\"bigSurMessage\":\"App_bigSurMessage__3M2-_\"};","module.exports = __webpack_public_path__ + \"static/media/logo-scaled-resolutions.64f60ba8.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filename\":\"PlistForm_filename__BpIK3\",\"field\":\"PlistForm_field__13Qra\",\"hexField\":\"PlistForm_hexField__1uOOu\",\"hexColumn\":\"PlistForm_hexColumn__mfWMu\",\"resolutionBox\":\"PlistForm_resolutionBox__1Wt4X\",\"resolutionSettingsHeading\":\"PlistForm_resolutionSettingsHeading__3HKDf\",\"resolutionListHeading\":\"PlistForm_resolutionListHeading__3O2jF\",\"resolutionListTd\":\"PlistForm_resolutionListTd__2600J\",\"resolutionList\":\"PlistForm_resolutionList__18lXd\",\"resolutionField\":\"PlistForm_resolutionField__y52tm\",\"resolutionButton\":\"PlistForm_resolutionButton__25wtv\",\"resolutionButtonAdd\":\"PlistForm_resolutionButtonAdd__woxAk\",\"resolutionButtonRemove\":\"PlistForm_resolutionButtonRemove__buC1b\",\"hexCode\":\"PlistForm_hexCode__2YRiQ\"};","import React from 'react';\nimport alertify from 'alertify.js';\nimport PropTypes from 'prop-types';\nimport { Controlled as CodeMirror } from 'react-codemirror2';\n\nalertify.logPosition('top right');\n\nconst PlistParser = ({ plistXmlString, updatePlistXmlString }) => {\n  return (\n    <div>\n      <CodeMirror\n        value={plistXmlString}\n        options={{\n          mode: 'xml',\n          theme: 'material',\n          lineNumbers: true,\n        }}\n        onBeforeChange={(editor, data, value) => {\n          updatePlistXmlString(value);\n        }}\n        onChange={(editor, data, value) => {}}\n      />\n    </div>\n  );\n};\nPlistParser.propTypes = {\n  plistXmlString: PropTypes.string.isRequired,\n  updatePlistXmlString: PropTypes.func.isRequired,\n};\n\nexport default PlistParser;\n","const plistConstants = {\n  plistXmlHeader: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">`,\n  plistXmlFooter: \"</plist>\",\n  plistXmlString: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>DisplayProductName</key>\n  <string>DELL U2515H</string>\n  <key>DisplayProductID</key>\n  <integer>53358</integer>\n  <key>DisplayVendorID</key>\n  <integer>4268</integer>\n  <key>scale-resolutions</key>\n  <array>\n    <data>AAAKAAAABaAAAAABACAAAA==</data>\n    <data>AAAFAAAAAtAAAAABACAAAA==</data>\n    <data>AAAPAAAACHAAAAABACAAAA==</data>\n    <data>AAAHgAAABDgAAAABACAAAA==</data>\n    <data>AAAMgAAABwgAAAABACAAAA==</data>\n    <data>AAAGQAAAA4QAAAABACAAAA==</data>\n    <data>AAAKAgAABaAAAAABACAAAA==</data>\n    <data>AAAKrAAABgAAAAABACAAAA==</data>\n    <data>AAAFVgAAAwAAAAABACAAAA==</data>\n  </array>\n</dict>\n</plist>`,\n  defaultResolutionForAddNew: {\n    base64String: \"AAAFAAAAAtAAAAABACAAAA==\",\n    decoded: {\n      decimalStringSpaced: \"1280 720 1\",\n      hexStringSpaced: \"00000500 000002d0 00000001 00200000\"\n    },\n    decimal: {\n      width: \"1280\",\n      height: \"720\",\n      hidpi: true\n    }\n  }\n};\n\nexport default plistConstants;\n","export default class XmlParserError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n    this.stack = (new Error()).stack;\n    this.name = this.constructor.name;\n  }\n}\n","import XmlParserError from \"./XmlParserError\";\nimport plistConstants from \"./PlistConstants\";\nimport CharsetAndEncodingHelper from \"./CharsetAndEncodingHelper\";\n\nexport default class XmlParser {\n  constructor() {\n    this.encHelp = new CharsetAndEncodingHelper();\n    if (typeof window.DOMParser !== \"undefined\") {\n      this.parseXmlIntern = xmlStr =>\n        new window.DOMParser().parseFromString(xmlStr, \"text/xml\");\n    } else if (\n      typeof window.ActiveXObject !== \"undefined\" &&\n      new window.ActiveXObject(\"Microsoft.XMLDOM\")\n    ) {\n      this.parseXmlIntern = xmlStr => {\n        const xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n        xmlDoc.async = \"false\";\n        xmlDoc.loadXML(xmlStr);\n        return xmlDoc;\n      };\n    } else {\n      throw new XmlParserError(\"No XML parser found\");\n    }\n  }\n\n  parseXml(xmlString) {\n    return this.parseXmlIntern(xmlString);\n  }\n\n  generateBase64String(decimalScaleResolutionObject) {\n    const hexString = [];\n    hexString.push(\n      this.encHelp.intToHexPrefixedWithZerosTo8Bit(\n        decimalScaleResolutionObject.width\n      )\n    );\n    hexString.push(\n      this.encHelp.intToHexPrefixedWithZerosTo8Bit(\n        decimalScaleResolutionObject.height\n      )\n    );\n    if (decimalScaleResolutionObject.hidpi === true) {\n      hexString.push(this.encHelp.intToHexPrefixedWithZerosTo8Bit(1));\n      hexString.push(this.encHelp.intToHexPrefixedWithZerosTo8Bit(2097152));\n    }\n    const joinedHexString = hexString.join(\"\");\n    return this.encHelp.hexToBase64(joinedHexString);\n  }\n\n  generateDecodedScaleResolutionObject(\n    decimalScaleResolutionObject,\n    base64String\n  ) {\n    const decodedObject = {};\n    if (decimalScaleResolutionObject.hidpi === true) {\n      decodedObject.decimalStringSpaced = `${\n        decimalScaleResolutionObject.width\n      } ${decimalScaleResolutionObject.height} ${\n        decimalScaleResolutionObject.hidpi\n      }`;\n    } else {\n      decodedObject.decimalStringSpaced = `${\n        decimalScaleResolutionObject.width\n      } ${decimalScaleResolutionObject.height}`;\n    }\n    decodedObject.hexStringSpaced = this.encHelp.base64ToHexStringSpaced(\n      base64String\n    );\n    return decodedObject;\n  }\n\n  generateDecimalScaleResolutionObject(base64String) {\n    const decimalStringSpaced = this.encHelp.base64ToDecimalStringSpaced(\n      base64String\n    );\n    const decimalItems = decimalStringSpaced.split(\" \");\n    const resolution = {\n      width: decimalItems[0],\n      height: decimalItems[1],\n      hidpi: false\n    };\n    if (decimalItems.length > 2) {\n      if (Number(decimalItems[2]) === 1) {\n        resolution.hidpi = true;\n      }\n    }\n    return resolution;\n  }\n\n  /**\n   * reverse version of parsePlistXml\n   * @param plistObject\n   */\n  generatePlistXml(plistObject) {\n    const xml = [];\n    xml.push(plistConstants.plistXmlHeader);\n    xml.push(\"<dict>\");\n    xml.push(\"  <key>DisplayProductName</key>\");\n    xml.push(`  <string>${plistObject.displayProductName}</string>`);\n    xml.push(\"  <key>DisplayProductID</key>\");\n    xml.push(`  <integer>${plistObject.displayProductId}</integer>`);\n    xml.push(\"  <key>DisplayVendorID</key>\");\n    xml.push(`  <integer>${plistObject.displayVendorId}</integer>`);\n    xml.push(\"  <key>scale-resolutions</key>\");\n    xml.push(\"  <array>\");\n    plistObject.scaleResolutions.forEach(scaleResolution => {\n      xml.push(`    <data>${scaleResolution.base64String}</data>`);\n      // <!--${scaleResolution.decimal.width}x${scaleResolution.base64String}</data><!--${scaleResolution.decimal.height}-->\n    });\n    xml.push(\"  </array>\");\n    xml.push(\"</dict>\");\n    xml.push(plistConstants.plistXmlFooter);\n    return xml.join(\"\\n\");\n  }\n\n  parsePlistXml(xmlString) {\n    let xml = {};\n    try {\n      xml = this.parseXml(xmlString);\n    } catch (err) {\n      throw new XmlParserError(\"invalid xml 001\");\n    }\n\n    if (xml.getElementsByTagName(\"parsererror\").length > 0) {\n      /* xml.getElementsByTagName(\"parsererror\")[0] */\n      throw new XmlParserError(\"invalid xml 002\");\n    }\n\n    const plistJson = {\n      displayProductName: \"\",\n      displayProductId: \"\",\n      displayVendorId: \"\",\n      scaleResolutions: []\n    };\n\n    try {\n      const children = xml.documentElement.childNodes;\n      for (let i = 0; i < children.length; i++) {\n        if (children[i].nodeName === \"dict\") {\n          const dictChildren = children[i].childNodes;\n          for (let j = 0; j < dictChildren.length; j++) {\n            /* nextSibling */\n            const dictChildNodeName = dictChildren[j].nodeName;\n            let dictChildNodeValue = \"\";\n            if (dictChildren[j].childNodes[0] !== undefined) {\n              dictChildNodeValue = dictChildren[j].childNodes[0].nodeValue;\n            }\n            if (\n              dictChildNodeName === \"key\" &&\n              dictChildNodeValue === \"DisplayProductName\"\n            ) {\n              plistJson.displayProductName =\n                dictChildren[j + 2].childNodes[0].nodeValue;\n            }\n            if (\n              dictChildNodeName === \"key\" &&\n              dictChildNodeValue === \"DisplayProductID\"\n            ) {\n              plistJson.displayProductId =\n                dictChildren[j + 2].childNodes[0].nodeValue;\n            }\n            if (\n              dictChildNodeName === \"key\" &&\n              dictChildNodeValue === \"DisplayVendorID\"\n            ) {\n              plistJson.displayVendorId =\n                dictChildren[j + 2].childNodes[0].nodeValue;\n            }\n            if (\n              dictChildNodeName === \"key\" &&\n              dictChildNodeValue === \"scale-resolutions\"\n            ) {\n              const scaleResolutionsChildren = dictChildren[j + 2].childNodes;\n              for (let l = 0; l < scaleResolutionsChildren.length; l++) {\n                if (scaleResolutionsChildren[l].nodeName === \"data\") {\n                  const scaleResolution = {};\n                  scaleResolution.base64String =\n                    scaleResolutionsChildren[l].childNodes[0].nodeValue;\n                  scaleResolution.decimal = this.generateDecimalScaleResolutionObject(\n                    scaleResolution.base64String\n                  );\n                  scaleResolution.decoded = this.generateDecodedScaleResolutionObject(\n                    scaleResolution.decimal,\n                    scaleResolution.base64String\n                  );\n                  plistJson.scaleResolutions.push(scaleResolution);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (err) {\n      throw new XmlParserError(\"invalid xml 003\");\n    }\n    return plistJson;\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CharsetAndEncodingHelper from './CharsetAndEncodingHelper';\nimport XmlParser from './XmlParser';\nimport plistConstants from './PlistConstants';\nimport plistStyles from './PlistForm.module.css';\nimport classNames from 'classnames';\nimport { IoMdTrash, IoMdAddCircle } from 'react-icons/io';\nimport alertify from 'alertify.js';\nalertify.logPosition('top right');\n\nconst encHelp = new CharsetAndEncodingHelper();\nconst xmlParser = new XmlParser();\n\nconst PlistForm = (props) => {\n  const isValidHexString = (hexStringToCheck) => {\n    if (hexStringToCheck.match(/^[a-f0-9]+$/)) {\n      return true;\n    }\n    alertify.error('Please enter only HEX values [a-f0-9]+');\n    return false;\n  };\n\n  const isValidDecimalString = (decimalStringToCheck) => {\n    if (decimalStringToCheck.match(/^[0-9]+$/)) {\n      return true;\n    }\n    alertify.error('Please enter only digits [0-9]+');\n    return false;\n  };\n\n  const handleResolutionInputChange = (event) => {\n    const index = event.target.getAttribute('data-index');\n    const newState = Array.from(props.plist.scaleResolutions);\n    const scaleResolution = encHelp.deepCopyOrReturnEmptyObject(newState[index]);\n    if (event.target.name === 'decimal_width') {\n      if (!isValidDecimalString(event.target.value)) {\n        return;\n      }\n      scaleResolution.decimal.width = event.target.value;\n    }\n    if (event.target.name === 'decimal_height') {\n      if (!isValidDecimalString(event.target.value)) {\n        return;\n      }\n      scaleResolution.decimal.height = event.target.value;\n    }\n    if (event.target.name === 'decimal_hidpi') {\n      scaleResolution.decimal.hidpi = event.target.checked;\n    }\n    try {\n      const base64String = xmlParser.generateBase64String(scaleResolution.decimal);\n      newState[index] = {\n        base64String,\n        decoded: xmlParser.generateDecodedScaleResolutionObject(\n          scaleResolution.decimal,\n          base64String,\n        ),\n        decimal: encHelp.deepCopyOrReturnEmptyObject(scaleResolution.decimal),\n      };\n      props.handleChange({\n        ...props.plist,\n        ...{ scaleResolutions: newState },\n      });\n    } catch (err) {\n      alertify.error(`Invalid Input. ${err}`);\n    }\n  };\n\n  const handleInputChange = (event) => {\n    if (event.target.name === 'displayProductName') {\n      props.handleChange({\n        ...props.plist,\n        ...{ displayProductName: event.target.value },\n      });\n    }\n    if (event.target.name === 'displayProductIdHex') {\n      if (isValidHexString(event.target.value)) {\n        props.handleChange({\n          ...props.plist,\n          ...{ displayProductId: encHelp.hexToInt(event.target.value) },\n        });\n      }\n    }\n    if (event.target.name === 'displayVendorIdHex') {\n      if (isValidHexString(event.target.value)) {\n        props.handleChange({\n          ...props.plist,\n          ...{ displayVendorId: encHelp.hexToInt(event.target.value) },\n        });\n      }\n    }\n  };\n\n  const addResolution = () => {\n    const newState = Array.from(props.plist.scaleResolutions);\n    /* deep clone default object without any shared references! */\n    newState.push(encHelp.deepCopyOrReturnEmptyObject(plistConstants.defaultResolutionForAddNew));\n    props.handleChange({\n      ...props.plist,\n      ...{ scaleResolutions: newState },\n    });\n  };\n\n  const deleteResolution = (index) => {\n    props.handleChange({\n      ...props.plist,\n      ...{ scaleResolutions: props.plist.scaleResolutions.filter((_, i) => i !== index) },\n    });\n  };\n\n  return (\n    <div className={classNames(plistStyles.resolutionBox)}>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <p className={classNames(plistStyles.resolutionSettingsHeading)}>DisplayProductName</p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <input\n            className={classNames(plistStyles.field)}\n            type=\"text\"\n            name=\"displayProductName\"\n            value={props.plist.displayProductName}\n            onChange={handleInputChange}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <p className={classNames(plistStyles.resolutionSettingsHeading)}>DisplayProductID</p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className={classNames(plistStyles.hexColumn)}>\n            (0x\n            <input\n              className={classNames(plistStyles.hexField)}\n              style={{\n                width: `${encHelp.intToHex(props.plist.displayProductId).length * 11}px`,\n              }}\n              type=\"text\"\n              name=\"displayProductIdHex\"\n              value={encHelp.intToHex(props.plist.displayProductId)}\n              onChange={handleInputChange}\n            />\n            )<sub>16</sub> = ({props.plist.displayProductId})<sub>10</sub>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <p className={classNames(plistStyles.resolutionSettingsHeading)}>DisplayVendorID</p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className={classNames(plistStyles.hexColumn)}>\n            (0x\n            <input\n              className={classNames(plistStyles.hexField)}\n              style={{\n                width: `${encHelp.intToHex(props.plist.displayVendorId).length * 11}px`,\n              }}\n              type=\"text\"\n              name=\"displayVendorIdHex\"\n              value={encHelp.intToHex(props.plist.displayVendorId)}\n              onChange={handleInputChange}\n            />\n            )<sub>16</sub> = ({props.plist.displayVendorId})<sub>10</sub>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <p className={classNames(plistStyles.resolutionSettingsHeading)}>Scale Resolutions</p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className={classNames(plistStyles.resolutionListTd)}>\n            <div>\n              <div className={classNames(plistStyles.resolutionList)}>\n                <div className=\"row\">\n                  <div className={classNames(plistStyles.resolutionListHeading, 'col-2')}>\n                    HiDPI\n                  </div>\n                  <div className={classNames(plistStyles.resolutionListHeading, 'col-7')}>\n                    Resolution\n                  </div>\n                  <div\n                    className={classNames(plistStyles.resolutionListHeading, 'col-3', 'text-right')}\n                  >\n                    Remove\n                  </div>\n                </div>\n                {props.plist.scaleResolutions.map((scaleResolution, scaleResolutionIndex) => (\n                  <div\n                    key={scaleResolutionIndex}\n                    className={classNames(plistStyles.resolutionListItem)}\n                  >\n                    <div className=\"row\">\n                      <div className=\"col-2\">\n                        <input\n                          type=\"checkbox\"\n                          name=\"decimal_hidpi\"\n                          onChange={handleResolutionInputChange}\n                          data-index={scaleResolutionIndex}\n                          checked={scaleResolution.decimal.hidpi}\n                        />\n                      </div>\n                      <div className=\"col-7\">\n                        <input\n                          className={classNames(plistStyles.resolutionField)}\n                          type=\"text\"\n                          name=\"decimal_width\"\n                          value={scaleResolution.decimal.width}\n                          onChange={handleResolutionInputChange}\n                          data-index={scaleResolutionIndex}\n                        />\n                        &nbsp; x &nbsp;\n                        <input\n                          className={classNames(plistStyles.resolutionField)}\n                          type=\"text\"\n                          name=\"decimal_height\"\n                          value={scaleResolution.decimal.height}\n                          onChange={handleResolutionInputChange}\n                          data-index={scaleResolutionIndex}\n                        />\n                      </div>\n                      <div className=\"col-3 d-flex flex-row-reverse text-right\">\n                        <div>\n                          <a\n                            href=\"#delete\"\n                            className={classNames(\n                              plistStyles.resolutionButton,\n                              plistStyles.resolutionButtonRemove,\n                            )}\n                            onClick={(e) => {\n                              e.preventDefault();\n                              deleteResolution(scaleResolutionIndex);\n                            }}\n                          >\n                            <IoMdTrash />\n                          </a>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col-2\"></div>\n                      <div className=\"col-10\">\n                        <code className={plistStyles.hexCode}>\n                          &lt;{scaleResolution.decoded.hexStringSpaced}&gt;\n                        </code>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                <div className=\"row\">\n                  <div className=\"col-2\"></div>\n                  <div className={classNames(plistStyles.resolutionListItem, 'col-8')}>\n                    <a\n                      href=\"#add\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        addResolution();\n                      }}\n                      className={plistStyles.resolutionButtonAdd}\n                    >\n                      <IoMdAddCircle /> Add new\n                    </a>\n                  </div>\n                  <div className=\"col-2\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nPlistForm.propTypes = {\n  plist: PropTypes.object.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\nexport default PlistForm;\n","import React, { Component } from 'react';\nimport alertify from 'alertify.js';\nimport PlistParser from './PlistParser';\nimport plistConstants from './PlistConstants';\nimport PlistForm from './PlistForm';\nimport XmlParser from './XmlParser';\nimport CharsetAndEncodingHelper from './CharsetAndEncodingHelper';\nimport plistContainerStyles from './PlistContainer.module.css';\nimport classNames from 'classnames';\nimport appStyles from './App.module.css';\nimport {\n  IoIosCloudDownload,\n  IoMdTrash,\n  IoIosCloseCircle,\n  IoIosCheckmarkCircle,\n  IoIosWarning,\n} from 'react-icons/io';\n\nexport default class PlistContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.handlePlistParserChange = this.handlePlistParserChange.bind(this);\n    this.handlePlistFormChange = this.handlePlistFormChange.bind(this);\n    this.downloadPlistAsFile = this.downloadPlistAsFile.bind(this);\n    this.parser = new XmlParser();\n    this.encHelp = new CharsetAndEncodingHelper();\n    /* initial state */\n    this.state = {\n      plistXmlString: plistConstants.plistXmlString,\n      plist: this.parser.parsePlistXml(plistConstants.plistXmlString),\n      xmlParseError: false,\n    };\n    alertify.logPosition('top right');\n  }\n\n  handlePlistParserChange(newPlistXmlString) {\n    let plistJson = {};\n    try {\n      plistJson = this.parser.parsePlistXml(newPlistXmlString);\n      this.setState({\n        plistXmlString: newPlistXmlString,\n        plist: plistJson,\n        xmlParseError: false,\n      });\n    } catch (err) {\n      this.setState({\n        plistXmlString: newPlistXmlString,\n        xmlParseError: true,\n      });\n    }\n  }\n\n  handlePlistFormChange(newPlistJsonObject) {\n    const xml = this.parser.generatePlistXml(newPlistJsonObject);\n    this.setState({\n      plistXmlString: xml,\n      plist: newPlistJsonObject,\n      xmlParseError: false,\n    });\n  }\n  getPlistFilename() {\n    return `DisplayProductID-${this.encHelp.intToHex(this.state.plist.displayProductId)}.plist`;\n  }\n  getFullPlistFilename() {\n    const filePrefix = '/System/Library/Displays/Contents/Resources/Overrides/DisplayVendorID';\n    return `${filePrefix}-${this.encHelp.intToHex(\n      this.state.plist.displayVendorId,\n    )}/DisplayProductID-${this.encHelp.intToHex(this.state.plist.displayProductId)}`;\n  }\n  downloadPlistAsFile() {\n    const textFileAsBlob = new Blob([this.state.plistXmlString], { type: 'text/plain' });\n    const fileNameToSaveAs = this.getPlistFilename();\n\n    const downloadLink = document.createElement('a');\n    downloadLink.download = fileNameToSaveAs;\n    downloadLink.innerHTML = 'Download File';\n    if (window.webkitURL != null) {\n      /* CHROME */\n      downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);\n    } else {\n      /* FIREFOX */\n      downloadLink.href = window.URL.createObjectURL(textFileAsBlob);\n      downloadLink.onclick = (event) => document.body.removeChild(event.target);\n      downloadLink.style.display = 'none';\n      document.body.appendChild(downloadLink);\n    }\n    downloadLink.click();\n  }\n\n  render() {\n    const xmlNoticeClassNames = classNames({\n      [`${plistContainerStyles.xmlValid}`]: !this.state.xmlParseError,\n      [`${plistContainerStyles.xmlInvalid}`]: this.state.xmlParseError,\n    });\n    let xmlNoticeMessage;\n    if (this.state.xmlParseError) {\n      xmlNoticeMessage = (\n        <span>\n          <IoIosCloseCircle /> xml invalid\n        </span>\n      );\n    } else {\n      xmlNoticeMessage = (\n        <span>\n          <IoIosCheckmarkCircle /> xml valid\n        </span>\n      );\n    }\n    return (\n      <>\n        <div className=\"row\">\n          <div className={classNames('col-sm-12', 'col-md-12', 'col-lg-12', 'col-xl-4')}>\n            <PlistForm plist={this.state.plist} handleChange={this.handlePlistFormChange} />\n          </div>\n          <div className=\"col-sm-12 col-md-12 col-lg-12 col-xl-1\"></div>\n          <div className=\"col-sm-12 col-md-12 col-lg-12 col-xl-7\">\n            <div>\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <p className={classNames(plistContainerStyles.resolutionSettingsHeading)}>\n                    Display PropertyList Filename\n                  </p>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <span className={classNames(plistContainerStyles.filename)}>\n                    {this.getFullPlistFilename()}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className={xmlNoticeClassNames}>{xmlNoticeMessage}</div>\n            <PlistParser\n              plistXmlString={this.state.plistXmlString}\n              updatePlistXmlString={this.handlePlistParserChange}\n            />\n\n            <div className={classNames('row', plistContainerStyles.buttonBarFooter)}>\n              <div className=\"col-md-12 text-right\">\n                <a className={plistContainerStyles.resetButton} href=\"./\">\n                  <IoMdTrash /> Reset Plist\n                </a>\n                <a\n                  className={plistContainerStyles.downloadButton}\n                  href=\"#download\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    this.downloadPlistAsFile();\n                  }}\n                >\n                  <IoIosCloudDownload />\n                  &nbsp;\n                  {'DisplayProductID-' + this.encHelp.intToHex(this.state.plist.displayProductId)}\n                </a>\n                <span className={plistContainerStyles.downloadNote}>\n                  <br />\n                  (only Chrome and Firefox)\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"my-5\">&nbsp;</div>\n          <hr />\n          <div className={classNames('row', appStyles.howTo)}>\n            <div className=\"col-md-2\" />\n            <div className=\"col-md-8\">\n              <h3 className={'howtoHeaderH3'}>How to use Scale Resolutions</h3>\n              <div>\n                <p>\n                  Follow the steps below to learn how to use Scale Resolutions. See the awesome{' '}\n                  <a href=\"http://www.tonymacx86.com/threads/adding-using-hidpi-custom-resolutions.133254/\">\n                    tonymacx86.com forum\n                  </a>{' '}\n                  for more details.\n                </p>\n                <div className={appStyles.warning}>\n                  <div className={appStyles.warningIcon}>\n                    <IoIosWarning style={{ marginRight: '10px' }} size=\"30\" />\n                  </div>\n                  <div>\n                    <p>\n                      <strong>This tool is provided without warranty</strong>. codeclou is not\n                      responsible for damages to your system. It is heavily discouraged to edit\n                      files in <em>/System/</em> directory. You are doing it at your own risk.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <h5\n                className={classNames(\n                  appStyles.numberedList,\n                  appStyles.numberedListFirst,\n                  appStyles.howtoHeaderH5,\n                )}\n              >\n                Enable HiDPI Mode\n              </h5>\n              <p>Open your terminal and copy/paste the following command to enable HiDPI mode:</p>\n              <div className={appStyles.codeBox}>\n                sudo defaults write /Library/Preferences/com.apple.windowserver.plist\n                DisplayResolutionEnabled -bool true\n              </div>\n              <h5\n                className={classNames(\n                  appStyles.numberedList,\n                  appStyles.numberedListSecond,\n                  appStyles.howtoHeaderH5,\n                )}\n              >\n                Detect your Display\n              </h5>\n              <p>To detect your display copy/paste the following command into your terminal:</p>\n              <div className={appStyles.codeBox}>ioreg -lw0 | grep IODisplayPrefsKey</div>\n              <p>The output on a Mac should look like so:</p>\n              <div className={appStyles.codeBox}>\n                \"IODisplayPrefsKey\" =\n                \"IOService:/AppleACPIPlatformExpert/PCI0@0/AppleACPIPCI/IGPU@2/AppleIntelFramebuffer@0/display0/AppleBacklightDisplay-610-a019\"\n                <br />\n                \"IODisplayPrefsKey\" =\n                \"IOService:/AppleACPIPlatformExpert/PCI0@0/AppleACPIPCI/IGPU@2/AppleIntelFramebuffer@2/display0/AppleDisplay-10ac-d06e\"\n              </div>\n              <p>\n                All external monitors are identified by <em>AppleDisplay</em> and internal monitors\n                by <em>AppleBacklightDisplay</em>. So if you want to set scale resolutions for your\n                external monitor you will need to look at the second line. Identify at the end of\n                the line your <strong>DisplayVendorId</strong> as{' '}\n                <code>{this.encHelp.intToHex(this.state.plist.displayVendorId)}</code> and your{' '}\n                <strong>DisplayProductID</strong> as{' '}\n                <code>{this.encHelp.intToHex(this.state.plist.displayProductId)}</code> and note\n                these values. Now insert them into the corresponding input fields on the top left\n                and the generator will generate a basic plist file for you.\n              </p>\n              <h5\n                className={classNames(\n                  appStyles.numberedList,\n                  appStyles.numberedListThird,\n                  appStyles.howtoHeaderH5,\n                )}\n              >\n                Customize your Resolutions\n              </h5>\n              <p>\n                Now you can customize the <strong>Scale Resolutions</strong>. For example you could\n                enter <strong>2560x1440</strong> and enable <strong>HiDPI</strong>. Be aware that\n                the generator does not do any sanity checks for you, what you enter is just getting\n                encoded. Please be aware that depending on your monitor and internal mac-checkups\n                during startup some resolutions might not work. <br />\n              </p>\n              <h5\n                className={classNames(\n                  appStyles.numberedList,\n                  appStyles.numberedListFourth,\n                  appStyles.howtoHeaderH5,\n                )}\n              >\n                Download plist and copy to System folder\n              </h5>\n              <p>\n                Once you have configured all your resolutions click the download button. A file\n                called <code>DisplayProductID-*.plist</code> will download.\n              </p>\n              <p>\n                Now copy this file to the destination that has been calculated on the top right\n                under <strong>Display PropertyList Filename</strong>. Example for a DELL Monitor:\n              </p>\n              <div className={appStyles.codeBox}>\n                {`sudo cp ~/Downloads/DisplayProductID-${this.encHelp.intToHex(\n                  this.state.plist.displayProductId,\n                )}.plist `}\n                {`/System/Library/Displays/Contents/Resources/Overrides/DisplayVendorID-${this.encHelp.intToHex(\n                  this.state.plist.displayVendorId,\n                )}/DisplayProductID-${this.encHelp.intToHex(this.state.plist.displayProductId)}`}\n              </div>\n              <p>\n                <strong>NOTE:</strong> That you might need to{' '}\n                <a href=\"http://osxdaily.com/2015/10/05/disable-rootless-system-integrity-protection-mac-os-x/\">\n                  disable System Integrity Protection\n                </a>{' '}\n                (at your own risk) to copy files to <code>/System/</code>. If you are running macOS\n                Catalina or above, see the note below.\n              </p>\n              <p>\n                <strong>NOTE:</strong> On macOS Catalina systems (or{' '}\n                <a href=\"https://developer.apple.com/forums/thread/649832\">above</a>), the{' '}\n                <code>/System/</code> folder is mounted read-only, so instead you should copy the\n                file to{' '}\n                <code>\n                  {`/Library/Displays/Contents/Resources/Overrides/DisplayVendorID-${this.encHelp.intToHex(\n                    this.state.plist.displayVendorId,\n                  )}/DisplayProductID-${this.encHelp.intToHex(this.state.plist.displayProductId)}`}\n                </code>\n                . This can be done without disabling System Integrity Protection. If the file path \n                does not exist, create it with{' '}\n                <code>\n                  {`sudo mkdir -p /Library/Displays/Contents/Resources/Overrides/DisplayVendorID-${this.encHelp.intToHex(\n                    this.state.plist.displayVendorId,\n                  )}`}\n                </code>\n              </p>\n              <h5\n                className={classNames(\n                  appStyles.numberedList,\n                  appStyles.numberedListFifth,\n                  appStyles.howtoHeaderH5,\n                )}\n              >\n                Restart Mac and use Resolutions\n              </h5>\n              <p>\n                Now you can change your resolution to the ones you entered (if macOS did not disable\n                them during boot check-ups)\n              </p>\n              <p>\n                A very handy{' '}\n                <a href=\"https://github.com/avibrazil/RDM\">tool to enable resolutions is RDM</a>\n                .\n                <br />\n                If you are more into commandline tools you might like{' '}\n                <a href=\"https://github.com/jhford/screenresolution\">screenresolutions</a>\n                .\n                <br />\n                And if you are willing to pay a small amount{' '}\n                <a href=\"http://www.madrau.com/\">SwitchResX</a> is also a great tool.\n              </p>\n            </div>\n            <div className=\"col-md-2\" />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ratioStyles from './AspectRatioCalculator.module.css';\nimport classNames from 'classnames';\n\nexport default class AspectRatioCalculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.recalculate = this.recalculate.bind(this);\n    this.state = {\n      width: 1920,\n      height: 1080,\n      ratioWidth: 16,\n      ratioHeight: 9,\n    };\n  }\n\n  recalculate(event) {\n    this.setState({ [`${event.target.name}`]: event.target.value });\n    const ratio = this.state.ratioWidth / this.state.ratioHeight;\n    if (event.target.name === 'width') {\n      this.setState({ height: event.target.value / ratio });\n    }\n    if (event.target.name === 'height') {\n      this.setState({ width: event.target.value * ratio });\n    }\n    if (event.target.name === 'ratioWidth') {\n      this.setState({ width: this.state.height * (event.target.value / this.state.ratioHeight) });\n    }\n    if (event.target.name === 'ratioHeight') {\n      this.setState({ height: this.state.width / (this.state.ratioWidth / event.target.value) });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <table>\n          <tbody>\n            <tr>\n              <th>Aspect Ratio</th>\n              <td>\n                <input\n                  className={classNames(ratioStyles.field)}\n                  type=\"text\"\n                  name=\"ratioWidth\"\n                  value={this.state.ratioWidth}\n                  onChange={this.recalculate}\n                />{' '}\n                :\n                <input\n                  className={classNames(ratioStyles.field)}\n                  type=\"text\"\n                  name=\"ratioHeight\"\n                  value={this.state.ratioHeight}\n                  onChange={this.recalculate}\n                />\n              </td>\n            </tr>\n            <tr>\n              <th>Resolution</th>\n              <td>\n                <input\n                  className={classNames(ratioStyles.field)}\n                  type=\"text\"\n                  name=\"width\"\n                  value={this.state.width}\n                  onChange={this.recalculate}\n                />\n                x\n                <input\n                  className={classNames(ratioStyles.field)}\n                  type=\"text\"\n                  name=\"height\"\n                  value={this.state.height}\n                  onChange={this.recalculate}\n                />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PlistContainer from './PlistContainer';\nimport AspectRatioCalculator from './AspectRatioCalculator';\nimport appStyles from './App.module.css';\nimport logo from './img/logo-scaled-resolutions.svg';\nimport { IoIosStarOutline, IoIosHeart } from 'react-icons/io';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.foo = 'bar';\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"container-fluid cs-header\">\n          <div className=\"cs-header-inner\">\n            <div className=\"row\">\n              <div className=\"col-xl-2\"></div>\n              <div className=\"col-sm-12 col-md-4 col-xl-3 d-flex justify-content-center\">\n                <div className=\"cs-header__logo\">\n                  <img\n                    src={logo}\n                    className=\"text-center\"\n                    style={{ maxWidth: '300px' }}\n                    alt=\"Scaled Resolutions your MacBooks external Monitor\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"col-sm-12 col-md-8 col-xl-5\">\n                <h1 className=\"cs-header__h1\">Scaled Resolutions</h1>\n                <h2 className=\"cs-header__h2\">for your MacBooks external Monitor</h2>\n                <h4 className=\"cs-header__h4\">\n                  Display Override PropertyList File Parser and Generator with HiDPI support\n                </h4>\n                <div className=\"cs-header__star\">\n                  <a\n                    href=\"https://github.com/codeclou/Display-Override-PropertyList-File-Parser-and-Generator-with-HiDPI-Support-For-Scaled-Resolutions\"\n                    className=\"cs-header__starlink\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <IoIosStarOutline /> star on github\n                  </a>\n                </div>\n              </div>\n              <div className=\"col-xl-2\"></div>\n            </div>\n          </div>\n        </div>\n        <div className={appStyles.bigSurMessage}>\n          This solution might not work with macOS Big Sur. We do not provide end user support.\n        </div>\n        <div className=\"container-fluid cs-body\">\n          <div className={appStyles.app}>\n            <PlistContainer />\n            <div className=\"row mt-5\">\n              <div className=\"col-md-5 mt-5\" style={{ backgroundColor: '#f4f5f7' }}>\n                <div className={appStyles.csBox}>\n                  <h4>Aspect Ratio Calculator</h4>\n\n                  <p>\n                    Use this calculator to calculcate horizontal and vertical resolution based on\n                    given Aspect Ratio.\n                  </p>\n                  <AspectRatioCalculator />\n                </div>\n              </div>\n              <div className=\"col-sm-12 col-md-2\">&nbsp;</div>\n              <div className=\"col-md-5 mt-5\" style={{ backgroundColor: '#f4f5f7' }}>\n                <div className={appStyles.csBox}>\n                  <h4>We like code!</h4>\n                  <p>...</p>\n                  <p />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"container-fluid cs-footer\">\n          <div className=\"cs-footer-inner\">\n            <div className=\"row\">\n              <div className=\"col-md-4\"></div>\n              <div className=\"col-md-4 text-center\">\n                <strong>\n                  Made with <IoIosHeart /> and <a href=\"https://facebook.github.io/react/\">React</a>{' '}\n                  by\n                </strong>\n                <br />\n                <a href=\"https://codeclou.io\">codeclou GmbH</a>\n              </div>\n              <div className=\"col-md-4\"></div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-4\"></div>\n              <div className=\"col-md-4 d-flex justify-content-center\">\n                <a href=\"https://codeclou.io/legal/en/imprint\">\n                  <span style={{ fontSsize: '0.8rem' }}>Imprint</span>\n                </a>\n                &nbsp;&nbsp;&nbsp;\n                <a href=\"https://codeclou.io/legal/en/privacy/github-pages\">\n                  <span style={{ fontSsize: '0.8rem' }}>Data Privacy</span>\n                </a>\n              </div>\n              <div className=\"col-md-4\"></div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// ///////////////////////////////////////////\n// Libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport alertify from 'alertify.js';\n\n// ///////////////////////////////////////////\n// Global CSS\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport './index.css';\n\n// ///////////////////////////////////////////\n// App\nimport App from './common/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nalertify.logPosition('top right');\n// ///////////////////////////////////////////\n// Render the router\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"xmlValid\":\"PlistContainer_xmlValid__3k3sN\",\"xmlInvalid\":\"PlistContainer_xmlInvalid__UwzL0\",\"buttonBarFooter\":\"PlistContainer_buttonBarFooter__1zapf\",\"resetButton\":\"PlistContainer_resetButton__3QKL1\",\"downloadButton\":\"PlistContainer_downloadButton___odUp\",\"downloadNote\":\"PlistContainer_downloadNote__222JQ\",\"resolutionSettingsHeading\":\"PlistContainer_resolutionSettingsHeading__3hWWl\",\"filename\":\"PlistContainer_filename__1fgjC\"};"],"sourceRoot":""}